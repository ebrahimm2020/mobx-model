{"version":3,"sources":["../src/base_model.js"],"names":["initObservables","target","observables","collection","shallow","BaseModel","actionName","method","Object","defineProperty","get","bind","configurable","prototype","options","modelJson","topLevelJson","requestId","constructor","id","model","onInitialize","lastSetRequestId","removeSelfFromCollection","destroyDependentRelations","removeSelfFromRelations","remove","relationsToDestroy","relations","reverseRelation","relation","onDestroy","forEach","isHasMany","propertyName","slice","relatedModel","isHasOne","relationsToRemoveFrom","removeMethodName","attributes","attributeValues","keys","reduce","values","attributeName","relationValues","type","foreignKey","camelizedForeignKey","map","urlRoot","jsonKey","items","l","length","i","toString","set","push","splice","indexOf","all","_urlRoot","modelName","name","value","_jsonKey"],"mappings":"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","file":"base_model.js","sourcesContent":["import {\r\n    transaction,\r\n    extendObservable,\r\n    isObservableArray,\r\n    observable\r\n} from \"mobx\";\r\nimport { tableize, underscore, camelize } from \"inflection\";\r\nimport filter from \"lodash/filter\";\r\nimport uniqueId from \"lodash/uniqueId\";\r\nimport result from \"lodash/result\";\r\n\r\nimport initAttributes from \"./init_attributes\";\r\nimport setAttributes from \"./set_attributes\";\r\nimport initRelations from \"./init_relations\";\r\nimport setRelations from \"./set_relations\";\r\n\r\n/*\r\n * This is a hack to allow each model that extends\r\n * BaseModel to have its own observable collection. Model is\r\n * assigned an observable collection when first instance of model is\r\n * created or when Model.all() method is called\r\n */\r\nconst initObservables = function(target) {\r\n    if (\r\n        !target.observables ||\r\n        !isObservableArray(target.observables.collection)\r\n    ) {\r\n        target.observables = {};\r\n        extendObservable(target.observables, {\r\n            collection: observable.shallow([])\r\n        });\r\n    }\r\n};\r\n\r\nclass BaseModel {\r\n    static attributes = {};\r\n    static relations = [];\r\n    // static observables = {};\r\n\r\n    id = null;\r\n    lastSetRequestId = null;\r\n\r\n    // static config = function(options = {}) {\r\n    //   let { models } = options;\r\n    //   this.models = models;\r\n    // };\r\n\r\n    /*\r\n   * NOTE: we access internal mobservable array of values to\r\n   * prevent notifying observers when we're just getting single\r\n   * value. This way we'll prevent re-rendering components displaying\r\n   * single model when collection changes\r\n   */\r\n    static get = function(id) {\r\n        let items = result(this, \"observables.$mobx.values.collection.value\");\r\n        if (items && isObservableArray(items)) {\r\n            let l = items.length;\r\n            for (var i = 0; i < l; i++) {\r\n                if (items[i].id.toString() === id.toString()) return items[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    static set = function(options = {}) {\r\n        // console.log('set static', this.name)\r\n\r\n        let { modelJson, topLevelJson, requestId } = options;\r\n\r\n        /*\r\n      requestId is used to allow models to \r\n      prevent loops when setting same attributes\r\n      multiple times, we set one if none is set\r\n     */\r\n        if (!requestId) requestId = uniqueId(\"request_\");\r\n\r\n        /*\r\n     * topLevelJson is used to get json for models referenced by ids\r\n     */\r\n        if (!topLevelJson) topLevelJson = modelJson;\r\n\r\n        let model = this.get(modelJson.id);\r\n\r\n        transaction(() => {\r\n            if (!model) {\r\n                model = new this({\r\n                    modelJson,\r\n                    topLevelJson,\r\n                    requestId\r\n                });\r\n\r\n                this.observables.collection.push(model);\r\n            }\r\n\r\n            model.set({ modelJson, topLevelJson, requestId });\r\n        });\r\n\r\n        // console.log('set', model)\r\n\r\n        return model;\r\n    };\r\n\r\n    static remove = function(model) {\r\n        if (\r\n            this.observables &&\r\n            isObservableArray(this.observables.collection)\r\n        ) {\r\n            this.observables.collection.splice(\r\n                this.observables.collection.indexOf(model),\r\n                1\r\n            );\r\n        }\r\n    };\r\n\r\n    static all = function() {\r\n        initObservables(this);\r\n        return this.observables.collection.slice();\r\n    };\r\n\r\n    static addClassAction(actionName, method) {\r\n        Object.defineProperty(this, actionName, {\r\n            get: function() {\r\n                return method.bind(this);\r\n            },\r\n            configurable: true\r\n        });\r\n    }\r\n\r\n    static addAction(actionName, method) {\r\n        Object.defineProperty(this.prototype, actionName, {\r\n            get: function() {\r\n                return method.bind(this);\r\n            },\r\n            configurable: true\r\n        });\r\n    }\r\n\r\n    constructor(options = {}) {\r\n        let { modelJson, topLevelJson, requestId } = options;\r\n\r\n        initObservables(this.constructor);\r\n\r\n        if (modelJson && modelJson.id) {\r\n            this.id = modelJson.id;\r\n        }\r\n\r\n        initAttributes({ model: this });\r\n        initRelations({ model: this });\r\n\r\n        this.onInitialize();\r\n    }\r\n\r\n    set(options = {}) {\r\n        let { requestId, modelJson, topLevelJson } = options;\r\n        let model = this;\r\n\r\n        if (!requestId) requestId = uniqueId(\"request_\");\r\n\r\n        if (this.lastSetRequestId === requestId) {\r\n            return;\r\n        } else {\r\n            this.lastSetRequestId = requestId;\r\n        }\r\n\r\n        transaction(() => {\r\n            setAttributes({ model, modelJson });\r\n\r\n            setRelations({\r\n                model,\r\n                requestId,\r\n                modelJson,\r\n                topLevelJson\r\n            });\r\n        });\r\n    }\r\n\r\n    get urlRoot() {\r\n        return this.constructor.urlRoot;\r\n    }\r\n\r\n    get jsonKey() {\r\n        return this.constructor.jsonKey;\r\n    }\r\n\r\n    onInitialize() {}\r\n\r\n    onDestroy() {\r\n        transaction(() => {\r\n            this.removeSelfFromCollection();\r\n            this.destroyDependentRelations();\r\n            this.removeSelfFromRelations();\r\n        });\r\n    }\r\n\r\n    removeSelfFromCollection() {\r\n        this.constructor.remove(this);\r\n    }\r\n\r\n    destroyDependentRelations() {\r\n        let relationsToDestroy = filter(\r\n            this.constructor.relations,\r\n            relation => {\r\n                let reverseRelation = relation.reverseRelation;\r\n                return (\r\n                    reverseRelation &&\r\n                    reverseRelation.onDestroy === \"destroyRelation\"\r\n                );\r\n            }\r\n        );\r\n\r\n        relationsToDestroy.forEach(relation => {\r\n            if (relation.isHasMany) {\r\n                this[relation.propertyName].slice().forEach(relatedModel => {\r\n                    relatedModel.onDestroy();\r\n                });\r\n            } else if (relation.isHasOne) {\r\n                this[relation.propertyName].onDestroy();\r\n            }\r\n        });\r\n    }\r\n\r\n    removeSelfFromRelations() {\r\n        let relationsToRemoveFrom = filter(\r\n            this.constructor.relations,\r\n            relation => {\r\n                let reverseRelation = relation.reverseRelation;\r\n                return (\r\n                    reverseRelation &&\r\n                    reverseRelation.onDestroy === \"removeSelf\"\r\n                );\r\n            }\r\n        );\r\n\r\n        relationsToRemoveFrom.forEach(relation => {\r\n            let removeMethodName = relation.reverseRelation.removeMethodName;\r\n\r\n            if (relation.isHasMany) {\r\n                this[relation.propertyName].slice().forEach(relatedModel => {\r\n                    if (relatedModel[removeMethodName]) {\r\n                        relatedModel[removeMethodName](this);\r\n                    }\r\n                });\r\n            } else if (relation.isHasOne) {\r\n                // console.log(relation.propertyName, removeMethodName, this[relation.propertyName])\r\n                if (\r\n                    this[relation.propertyName] &&\r\n                    this[relation.propertyName][removeMethodName]\r\n                ) {\r\n                    this[relation.propertyName][removeMethodName](this);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    toJSON() {\r\n        const { id, constructor } = this;\r\n        const { attributes, relations } = constructor;\r\n\r\n        // collect attributes\r\n        const attributeValues = Object.keys(attributes || {}).reduce(\r\n            (values, attributeName) => {\r\n                values[attributeName] = this[attributeName];\r\n                return values;\r\n            },\r\n            {}\r\n        );\r\n\r\n        // collect relation models id\r\n        const relationValues = (relations || []).reduce(\r\n            (values, { type, propertyName, foreignKey }) => {\r\n                const camelizedForeignKey = camelize(foreignKey, true);\r\n\r\n                if (type === \"hasMany\") {\r\n                    values[camelizedForeignKey] = (this[propertyName] || [])\r\n                        .slice()\r\n                        .map(model => model.id);\r\n                }\r\n\r\n                if (type === \"hasOne\") {\r\n                    values[camelizedForeignKey] = (this[propertyName] || {}).id;\r\n                }\r\n\r\n                return values;\r\n            },\r\n            {}\r\n        );\r\n\r\n        return {\r\n            id,\r\n            ...attributeValues,\r\n            ...relationValues\r\n        };\r\n    }\r\n}\r\n\r\nObject.defineProperty(BaseModel, \"urlRoot\", {\r\n    get: function() {\r\n        return this._urlRoot\r\n            ? this._urlRoot\r\n            : \"/\" + tableize(this.modelName || this.name);\r\n    },\r\n    set: function(value) {\r\n        this._urlRoot = value;\r\n    },\r\n    configurable: true\r\n});\r\n\r\nObject.defineProperty(BaseModel, \"jsonKey\", {\r\n    get: function() {\r\n        return this._jsonKey\r\n            ? this._jsonKey\r\n            : underscore(this.modelName || this.name);\r\n    },\r\n    set: function(value) {\r\n        this._jsonKey = value;\r\n    },\r\n    configurable: true\r\n});\r\n\r\nexport default BaseModel;\r\n"]}