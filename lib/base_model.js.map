{"version":3,"sources":["../src/base_model.js"],"names":["initObservables","target","observables","collection","BaseModel","actionName","method","Object","defineProperty","get","bind","prototype","options","modelJson","topLevelJson","requestId","constructor","id","model","onInitialize","lastSetRequestId","removeSelfFromCollection","destroyDependentRelations","removeSelfFromRelations","remove","relationsToDestroy","relations","reverseRelation","relation","onDestroy","forEach","isHasMany","propertyName","slice","relatedModel","isHasOne","relationsToRemoveFrom","removeMethodName","attributes","attributeValues","keys","reduce","values","attributeName","relationValues","type","foreignKey","camelizedForeignKey","map","urlRoot","jsonKey","items","l","length","i","toString","set","push","splice","indexOf","all","_urlRoot","modelName","name","value","_jsonKey"],"mappings":"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","file":"base_model.js","sourcesContent":["import { \r\n  transaction, extendObservable, isObservableArray, asFlat\r\n} from 'mobx';\r\nimport { tableize, underscore, camelize } from 'inflection';\r\nimport filter from 'lodash/filter';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport result from 'lodash/result';\r\n\r\nimport initAttributes from './init_attributes';\r\nimport setAttributes from './set_attributes';\r\nimport initRelations from './init_relations';\r\nimport setRelations from './set_relations';\r\n\r\n/*\r\n * This is a hack to allow each model that extends\r\n * BaseModel to have its own observable collection. Model is\r\n * assigned an observable collection when first instance of model is\r\n * created or when Model.all() method is called\r\n */\r\nconst initObservables = function(target) {\r\n  if (!target.observables || !isObservableArray(target.observables.collection)) {\r\n    target.observables = {};\r\n    extendObservable(target.observables, { collection: asFlat([]) });  \r\n  }\r\n}\r\n\r\n\r\nclass BaseModel {\r\n\r\n  static attributes = {};\r\n  static relations = [];\r\n  // static observables = {};\r\n\r\n  id = null;\r\n  lastSetRequestId = null;  \r\n\r\n  // static config = function(options = {}) {\r\n  //   let { models } = options;\r\n  //   this.models = models;\r\n  // };\r\n\r\n  /*\r\n   * NOTE: we access internal mobservable array of values to\r\n   * prevent notifying observers when we're just getting single\r\n   * value. This way we'll prevent re-rendering components displaying\r\n   * single model when collection changes\r\n   */\r\n  static get = function(id) {\r\n    let items = result(this, 'observables.$mobx.values.collection.value')   \r\n    if (items && isObservableArray(items)) {\r\n      let l = items.length;\r\n      for(var i = 0; i < l; i++) {\r\n        if (items[i].id.toString() === id.toString()) return items[i];\r\n      } \r\n    }    \r\n\r\n    return null;\r\n  };  \r\n\r\n  static set = function(options = {}) {\r\n\r\n    // console.log('set static', this.name)\r\n\r\n    let { modelJson, topLevelJson, requestId } = options;\r\n\r\n    /*\r\n      requestId is used to allow models to \r\n      prevent loops when setting same attributes\r\n      multiple times, we set one if none is set\r\n     */\r\n    if (!requestId) requestId = uniqueId('request_');\r\n\r\n    /*\r\n     * topLevelJson is used to get json for models referenced by ids\r\n     */\r\n    if (!topLevelJson) topLevelJson = modelJson;\r\n\r\n    let model = this.get(modelJson.id);\r\n    \r\n    transaction(() => {\r\n      if (!model) {\r\n        model = new this({\r\n          modelJson,\r\n          topLevelJson,\r\n          requestId\r\n        });\r\n\r\n        this.observables.collection.push(model);\r\n      }\r\n\r\n      model.set({ modelJson, topLevelJson, requestId });\r\n    });\r\n\r\n    // console.log('set', model)\r\n\r\n    return model;\r\n  };\r\n\r\n  static remove = function (model) {\r\n    if (this.observables && isObservableArray(this.observables.collection)) {\r\n      this.observables.collection.splice(this.observables.collection.indexOf(model), 1);\r\n    }\r\n  };\r\n\r\n  static all = function() {\r\n    initObservables(this);\r\n    return this.observables.collection.slice();\r\n  };\r\n\r\n  static addClassAction(actionName, method) {\r\n    Object.defineProperty(this, actionName, {\r\n      get: function() {\r\n        return method.bind(this);\r\n      }\r\n    });\r\n  };\r\n\r\n  static addAction(actionName, method) {\r\n    Object.defineProperty(this.prototype, actionName, {\r\n      get: function() {\r\n        return method.bind(this);\r\n      }\r\n    });\r\n  };\r\n  \r\n  constructor(options = {}) {\r\n    let { \r\n      modelJson,\r\n      topLevelJson,\r\n      requestId\r\n    } = options;\r\n\r\n    \r\n    initObservables(this.constructor)\r\n\r\n\r\n\r\n    if (modelJson && modelJson.id) {\r\n      this.id = modelJson.id;\r\n    }\r\n\r\n    initAttributes({ model: this });\r\n    initRelations({ model: this });\r\n\r\n    this.onInitialize();\r\n  }\r\n\r\n\r\n  set(options = {}) {\r\n    let { requestId, modelJson, topLevelJson } = options;\r\n    let model = this;\r\n\r\n    if (!requestId) requestId = uniqueId('request_');\r\n\r\n    if (this.lastSetRequestId === requestId) {\r\n      return;\r\n    } else {\r\n      this.lastSetRequestId = requestId;\r\n    }\r\n\r\n    transaction(() => {\r\n      setAttributes({ model, modelJson });\r\n      \r\n      setRelations({\r\n        model,\r\n        requestId,\r\n        modelJson,\r\n        topLevelJson\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  get urlRoot() {\r\n    return this.constructor.urlRoot;\r\n  }\r\n\r\n  get jsonKey() {\r\n    return this.constructor.jsonKey;\r\n  }\r\n\r\n  onInitialize() {\r\n  }\r\n\r\n  onDestroy() {    \r\n    transaction(() => {\r\n      this.removeSelfFromCollection();        \r\n      this.destroyDependentRelations();\r\n      this.removeSelfFromRelations();\r\n    });\r\n  }\r\n\r\n  removeSelfFromCollection() {\r\n    this.constructor.remove(this);\r\n  }\r\n\r\n  destroyDependentRelations() {\r\n    let relationsToDestroy = filter(this.constructor.relations, relation => {\r\n      let reverseRelation = relation.reverseRelation;\r\n      return reverseRelation && reverseRelation.onDestroy === 'destroyRelation';\r\n    });\r\n\r\n    relationsToDestroy.forEach(relation => {\r\n      if (relation.isHasMany) {\r\n        this[relation.propertyName].slice().forEach(relatedModel => {\r\n          relatedModel.onDestroy();\r\n        })\r\n      } else if (relation.isHasOne) {\r\n        this[relation.propertyName].onDestroy();\r\n      }\r\n    })\r\n  }\r\n\r\n  removeSelfFromRelations() {\r\n\r\n    let relationsToRemoveFrom = filter(this.constructor.relations, relation => {\r\n      let reverseRelation = relation.reverseRelation;\r\n      return reverseRelation && reverseRelation.onDestroy === 'removeSelf';\r\n    });\r\n\r\n    relationsToRemoveFrom.forEach(relation => {\r\n\r\n      let removeMethodName = relation.reverseRelation.removeMethodName;\r\n\r\n      if (relation.isHasMany) {\r\n        this[relation.propertyName].slice().forEach(relatedModel => {\r\n          if (relatedModel[removeMethodName]) {\r\n            relatedModel[removeMethodName](this);\r\n          }\r\n        })\r\n      } else if (relation.isHasOne) {\r\n        // console.log(relation.propertyName, removeMethodName, this[relation.propertyName])\r\n        if (this[relation.propertyName] && this[relation.propertyName][removeMethodName]) {\r\n          this[relation.propertyName][removeMethodName](this);\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  toJSON () {\r\n    const { id, constructor } = this;\r\n    const { attributes, relations } = constructor;\r\n\r\n    // collect attributes\r\n    const attributeValues = Object.keys(attributes || {}).reduce((values, attributeName) => {\r\n      values[attributeName] = this[attributeName];\r\n      return values;\r\n    }, {});\r\n\r\n    // collect relation models id\r\n    const relationValues = (relations || []).reduce((values, {type, propertyName, foreignKey}) => {\r\n      const camelizedForeignKey = camelize(foreignKey, true);\r\n\r\n      if (type === 'hasMany') {\r\n        values[camelizedForeignKey] = (this[propertyName] || []).slice().map(model => model.id);\r\n      }\r\n\r\n      if (type === 'hasOne') {\r\n        values[camelizedForeignKey] = (this[propertyName] || {}).id;\r\n      }\r\n\r\n      return values;\r\n    }, {});\r\n\r\n    return {\r\n      id,\r\n      ...attributeValues,\r\n      ...relationValues,\r\n    };\r\n  }\r\n\r\n}\r\n\r\nObject.defineProperty(BaseModel, 'urlRoot', {\r\n  get: function() {\r\n    return this._urlRoot ? this._urlRoot : '/'+tableize(this.modelName || this.name);\r\n  },\r\n  set: function(value) {\r\n    this._urlRoot = value;\r\n  }\r\n});\r\n\r\nObject.defineProperty(BaseModel, 'jsonKey', {\r\n  get: function() {\r\n    return this._jsonKey ? this._jsonKey : underscore(this.modelName || this.name);\r\n  },\r\n  set: function(value) {\r\n    this._jsonKey = value;\r\n  }\r\n});\r\n\r\n\r\nexport default BaseModel;"]}