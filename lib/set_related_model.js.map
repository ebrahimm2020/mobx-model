{"version":3,"sources":["../src/set_related_model.js"],"names":["setRelatedModel","options","id","modelJson","relatedModel","model","relation","requestId","topLevelJson","existingRelatedModel","topLevelModelJson","topLevelJsonKey","isHasMany","propertyName","find","m","isHasOne","undefined","get","set","push","reverseRelation","setReverseRelation","setMethodName"],"mappings":"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","file":"set_related_model.js","sourcesContent":["import isNumber from 'lodash/isNumber';\nimport isPlainObject from 'lodash/isPlainObject';\nimport find from 'lodash/find';\nimport includes from 'lodash/includes';\n\nimport BaseModel from './base_model';\n\nexport default function setRelatedModel(options = {}) {\n\n  let {\n    id,\n    modelJson,\n    relatedModel, // related model instance, basically the same as existingRelatedModel\n    model,\n    relation,\n    requestId,\n    topLevelJson,\n  } = options;\n\n  let existingRelatedModel;\n  // id, json, relatedModel,   \n\n  if (!id && !modelJson && !relatedModel) return;\n\n  // if only id was passed, try to get json from top level\n  if (id && !modelJson) {\n    let topLevelModelJson = topLevelJson[relation.topLevelJsonKey];                  \n    if (topLevelModelJson) {\n      modelJson = find(topLevelModelJson, { id });\n    }\n  }\n\n  if (!id && modelJson) id = modelJson.id;\n  if (!id && relatedModel) id = relatedModel.id;\n\n\n\n  // try to find it in array by id if hasMany relation\n  if (relation.isHasMany) {\n    existingRelatedModel = model[relation.propertyName].find(m => m.id === id);\n  // or just check if property is assigned\n  } else if (relation.isHasOne) {\n    existingRelatedModel = model[relation.propertyName];\n    if (existingRelatedModel && existingRelatedModel.id !== id) existingRelatedModel = undefined;\n  }\n\n\n\n\n  // if no existing related model was not found \n  if (!existingRelatedModel) {\n\n    // if no related model was passed\n    if (!relatedModel) {    \n\n      // if no json passed, then just try to fetch model \n      // with given id from the store, if any\n      if (!modelJson) {\n\n        /*\n         * !!!!!!!!!!!!!!!!!!!!!!!!!!!\n         * TODO\n         */\n\n        relatedModel = relation.relatedModel.get(id)\n\n      // if not only id was passed in json then do regular\n      // processing\n      } else {\n\n        // add relation to its store\n        relatedModel = relation.relatedModel.set({\n          modelJson,\n          requestId,\n          topLevelJson\n        })\n\n      }\n    }\n\n    // if we finally got related model, or it was passed\n    // add it to relation property\n    if (relatedModel) {\n\n      // push new model to array\n      if (relation.isHasMany && !includes(model[relation.propertyName], relatedModel)) {\n        model[relation.propertyName].push(relatedModel);\n\n      // or just assign it to the property\n      } else if (relation.isHasOne) {\n        model[relation.propertyName] = relatedModel;\n      }\n\n      // if there is reverse relation, add current model\n      // to the related model's reverse relation.\n      let reverseRelation = relation.reverseRelation;\n      if (reverseRelation) {\n        let setReverseRelation = relatedModel[reverseRelation.setMethodName]\n        // console.log('reverseRelation', relation, relatedModel, reverseRelation.setMethodName, model)\n        if (setReverseRelation) setReverseRelation({ relatedModel: model });\n      }\n\n    }\n\n    return relatedModel;\n\n  // if there is existing related model\n  } else {\n\n    // update it with json if it was passed\n    if (modelJson) {\n      existingRelatedModel.set({\n        requestId,\n        modelJson,\n        topLevelJson\n      });\n    }\n\n    return existingRelatedModel;\n\n  }\n\n}"]}