{"version":3,"sources":["../src/set_relations_defaults.js"],"names":["setRelationsDefaults","model","constructor","getModel","Error","relations","forEach","relation","_isPrepared","Object","defineProperty","get","type","isHasMany","initialValue","isHasOne","relatedModel","propertyName","modelName","name","jsonKey","topLevelJsonKey","foreignKey","setMethodName","removeMethodName","reverseRelation","onDestroy"],"mappings":"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","file":"set_relations_defaults.js","sourcesContent":["import { upperCaseFirstLetter, lowercaseFirstLetter } from './utils';\nimport {\n  pluralize, underscore, tableize, foreign_key,\n  singularize\n} from 'inflection';\nimport isBoolean from 'lodash/isBoolean';\nimport isString from 'lodash/isString';\n\n// mutate static relations and add defaults\n// to each relation\nexport default function setRelationsDefaults(model) {\n\n  if (!model.constructor.getModel) {\n    throw new Error(\"getModel static method must be defined for a \\\n                     base model class, that returns model class given its name\")\n  }\n\n  model.constructor.relations.forEach(relation => {\n\n    if (relation._isPrepared) return;\n\n    // console.log('setRelationsDefaults', model, relation)   \n\n    // shorthand method to quickly check if relation is of hasMany type\n    Object.defineProperty(relation, \"isHasMany\", {\n      get: function() {\n        return this.type === 'hasMany'\n      }\n    });\n\n    // shorthand method to quickly check if relation is of hasOne type\n    Object.defineProperty(relation, \"isHasOne\", {\n      get: function() {\n        return this.type === 'hasOne'\n      }\n    });\n\n    // set initialValue for relation property\n    if (relation.isHasMany) {\n      relation.initialValue = [];\n    } else if (relation.isHasOne) {\n      relation.initialValue = null;\n    }\n\n    if (isString(relation.relatedModel)) {\n      relation.relatedModel = model.constructor.getModel(relation.relatedModel);\n    }\n\n    // property name on model instance to relation(s)\n    if (!relation.propertyName) {\n      relation.propertyName = lowercaseFirstLetter(relation.relatedModel.modelName || relation.relatedModel.name);\n\n      if (relation.isHasMany) {\n        relation.propertyName = pluralize(relation.propertyName)\n      }\n    }\n\n    // json key for embedded json\n    if (!relation.jsonKey) {\n      relation.jsonKey = underscore(relation.propertyName);\n    }\n\n    // key in top level json\n    if (!relation.topLevelJsonKey) {\n      relation.topLevelJsonKey = tableize(relation.propertyName);\n    }\n\n    // foreign key with ids of relations\n    if (!relation.foreignKey) {\n      if (relation.isHasMany) {\n        relation.foreignKey = foreign_key(singularize(relation.propertyName)) + 's';\n      } else if (relation.isHasOne) {\n        relation.foreignKey = foreign_key(relation.propertyName);\n      }\n    }\n\n    let name = upperCaseFirstLetter(relation.propertyName);\n    if (relation.isHasMany) name = singularize(name);\n\n    // method name to add single relation, will be used as alias\n    if (!relation.setMethodName) {      \n      relation.setMethodName = `set${name}`;\n    }\n\n    // method name to remove single relation, will be used as alias\n    if (!relation.removeMethodName) {\n      relation.removeMethodName = `remove${name}`;\n    }\n\n    let reverseRelation = relation.reverseRelation;\n\n    if (reverseRelation) {      \n\n      if (isBoolean(reverseRelation)) {\n        reverseRelation = relation.reverseRelation = {};\n      }\n\n      if (!reverseRelation.onDestroy && reverseRelation.onDestroy !== false) {\n        reverseRelation.onDestroy = 'removeSelf'\n      }\n\n      if (!reverseRelation.propertyName) {\n        reverseRelation.propertyName = lowercaseFirstLetter(model.constructor.modelName || model.constructor.name);\n      }\n\n      let name = upperCaseFirstLetter(reverseRelation.propertyName);\n\n      if (!reverseRelation.setMethodName) {        \n        reverseRelation.setMethodName = `set${name}`;\n      }\n\n      if (!reverseRelation.removeMethodName) {        \n        reverseRelation.removeMethodName = `remove${name}`;\n      }\n\n      //console.log('setRelationsDefaults reverseRelation is true', relation.reverseRelation, relation)\n\n    }\n\n    relation._isPrepared = true;\n\n  });\n\n}"]}