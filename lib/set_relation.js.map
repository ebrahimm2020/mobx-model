{"version":3,"sources":["../src/set_relation.js"],"names":["setRelation","options","ids","modelJson","relation","model","requestId","topLevelJson","undefined","isHasMany","Error","propertyName","relatedModelIds","collection","attributes","forEach","Object","assign","relatedModelAttributes","id","relatedModel","setMethodName","push","slice","removeMethodName","isHasOne","initialValue"],"mappings":";;;;;kBAGwBA,W;;AAHxB;;;;AACA;;;;;;AAEe,SAASA,WAAT,GAAmC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAAA,MAG9CC,GAH8C,GAS5CD,OAT4C,CAG9CC,GAH8C;AAAA,MAI9CC,SAJ8C,GAS5CF,OAT4C,CAI9CE,SAJ8C;AAAA,MAK9CC,QAL8C,GAS5CH,OAT4C,CAK9CG,QAL8C;AAAA,MAM9CC,KAN8C,GAS5CJ,OAT4C,CAM9CI,KAN8C;AAAA,MAO9CC,SAP8C,GAS5CL,OAT4C,CAO9CK,SAP8C;AAAA,MAQ9CC,YAR8C,GAS5CN,OAT4C,CAQ9CM,YAR8C;;AAWhD;;AAEA;;AACA,MAAI,CAACJ,SAAD,IAAcD,QAAMM,SAAxB,EAAmC;;AAEnC,MAAIJ,SAASK,SAAb,EAAwB;;AAEtB,QAAKP,OAAO,CAAC,uBAAQA,GAAR,CAAT,IAA2BC,aAAa,CAAC,uBAAQA,SAAR,CAA7C,EAAkE;AAChE,YAAM,IAAIO,KAAJ,+BAAsCN,SAASO,YAA/C,qBAAN;AACD;;AAED,QAAIC,kBAAkB,EAAtB;AACA,QAAIC,aAAaR,MAAMD,SAASO,YAAf,CAAjB;;AAEA,QAAIG,aAAaX,YAAYA,SAAZ,GAAwBD,GAAzC;;AAEA;AACAY,eAAWC,OAAX,CAAmB,kCAA0B;;AAE3C;;AAEA,UAAId,UAAU;AACZK,4BADY;AAEZC;AAFY,OAAd;;AAKA,UAAIJ,SAAJ,EAAe;AACba,eAAOC,MAAP,CAAchB,OAAd,EAAuB,EAAEE,WAAWe,sBAAb,EAAvB;AACD,OAFD,MAEO;AACLF,eAAOC,MAAP,CAAchB,OAAd,EAAuB,EAAEkB,IAAID,sBAAN,EAAvB;AACD;;AAED,UAAIE,eAAef,MAAMD,SAASiB,aAAf,EAA8BpB,OAA9B,CAAnB;;AAEA;AACA;AACA,UAAImB,YAAJ,EAAkB;AAChBR,wBAAgBU,IAAhB,CAAqBF,aAAaD,EAAlC;AACD;AAEF,KAvBD;;AAyBA;AACAN,eAAWU,KAAX,GAAmBR,OAAnB,CAA2B,wBAAgB;AACzC,UAAI,CAAC,wBAASH,eAAT,EAA0BQ,aAAaD,EAAvC,CAAL,EAAiD;AAC/Cd,cAAMD,SAASoB,gBAAf,EAAiCJ,YAAjC;AACD;AACF,KAJD;AAMD,GA5CD,MA4CO,IAAIhB,SAASqB,QAAb,EAAuB;;AAE5B,QAAIxB,WAAU;AACZK,0BADY;AAEZC;AAFY,KAAd;;AAKA,QAAIJ,SAAJ,EAAe;AACba,aAAOC,MAAP,CAAchB,QAAd,EAAuB,EAAEE,oBAAF,EAAvB;AACD,KAFD,MAEO;AACLa,aAAOC,MAAP,CAAchB,QAAd,EAAuB,EAAEkB,IAAIjB,GAAN,EAAvB;AACD;;AAED;AACA,QAAIkB,eAAef,MAAMD,SAASiB,aAAf,EAA8BpB,QAA9B,CAAnB;;AAEA;AACA,QAAI,CAACmB,YAAL,EAAmB;AACjBf,YAAMD,SAASO,YAAf,IAA+BP,SAASsB,YAAxC;AACD;AAEF;AACF","file":"set_relation.js","sourcesContent":["import isArray from 'lodash/isArray';\nimport includes from 'lodash/includes';\n\nexport default function setRelation(options = {}) {  \n\n  let {\n    ids,\n    modelJson,\n    relation,\n    model,\n    requestId,\n    topLevelJson\n  } = options;\n\n  // console.log('setRelation', relation, ids, modelJson)\n\n  // if no ids and json was passed, do nothing\n  if (!modelJson && ids===undefined) return\n\n  if (relation.isHasMany) {\n\n    if ((ids && !isArray(ids)) || (modelJson && !isArray(modelJson))) {\n      throw new Error(`Expected json or ids for ${relation.propertyName} to be an array`);\n    }\n\n    let relatedModelIds = [];\n    let collection = model[relation.propertyName];\n\n    let attributes = modelJson ? modelJson : ids;\n\n    // add new relations to this model\n    attributes.forEach(relatedModelAttributes => {\n\n      // console.log('relatedModelAttributes', relatedModelAttributes)\n\n      let options = {\n        requestId,\n        topLevelJson\n      }\n\n      if (modelJson) {\n        Object.assign(options, { modelJson: relatedModelAttributes })\n      } else {\n        Object.assign(options, { id: relatedModelAttributes })\n      }\n\n      let relatedModel = model[relation.setMethodName](options);\n      \n      // can be undefined for example if we haven't found\n      // id in a separate store\n      if (relatedModel) {\n        relatedModelIds.push(relatedModel.id);\n      }\n      \n    });\n\n    // remove relations not in json\n    collection.slice().forEach(relatedModel => {\n      if (!includes(relatedModelIds, relatedModel.id)) {\n        model[relation.removeMethodName](relatedModel);\n      }\n    });\n\n  } else if (relation.isHasOne) {\n\n    let options = {\n      requestId,\n      topLevelJson\n    }\n\n    if (modelJson) {\n      Object.assign(options, { modelJson })\n    } else {\n      Object.assign(options, { id: ids })\n    }\n\n    // try to set relation\n    let relatedModel = model[relation.setMethodName](options);\n\n    // if no related model was returned then reset property\n    if (!relatedModel) {\n      model[relation.propertyName] = relation.initialValue;\n    }\n\n  }\n}"]}