{"version":3,"sources":["../src/remove_related_model.js"],"names":["removeRelatedModel","options","model","relation","relatedModel","isHasMany","collection","propertyName","splice","indexOf","isHasOne","initialValue"],"mappings":";;;;;kBAAwBA,kB;AAAT,SAASA,kBAAT,GAA0C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAAA,MACjDC,KADiD,GACfD,OADe,CACjDC,KADiD;AAAA,MAC1CC,QAD0C,GACfF,OADe,CAC1CE,QAD0C;AAAA,MAChCC,YADgC,GACfH,OADe,CAChCG,YADgC;;;AAGvD,MAAID,SAASE,SAAb,EAAwB;AACtB,QAAIC,aAAaJ,MAAMC,SAASI,YAAf,CAAjB;AACAD,eAAWE,MAAX,CAAkBF,WAAWG,OAAX,CAAmBL,YAAnB,CAAlB,EAAoD,CAApD;AACD,GAHD,MAGO,IAAID,SAASO,QAAb,EAAuB;AAC5BR,UAAMC,SAASI,YAAf,IAA+BJ,SAASQ,YAAxC;AACD;AACF","file":"remove_related_model.js","sourcesContent":["export default function removeRelatedModel(options = {}) {\r\n  let { model, relation, relatedModel } = options;\r\n\r\n  if (relation.isHasMany) {\r\n    let collection = model[relation.propertyName];\r\n    collection.splice(collection.indexOf(relatedModel), 1);\r\n  } else if (relation.isHasOne) {\r\n    model[relation.propertyName] = relation.initialValue;\r\n  }\r\n}"]}